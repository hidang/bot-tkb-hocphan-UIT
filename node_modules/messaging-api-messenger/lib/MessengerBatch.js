"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

var _warning = _interopRequireDefault(require("warning"));

var _Messenger = _interopRequireDefault(require("./Messenger"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





















function omitUndefinedFields(obj = {}) {
  return JSON.parse(JSON.stringify(obj));
}

function sendRequest(body) {
  return {
    method: 'POST',
    relative_url: 'me/messages',
    body };

}

function sendMessage(
idOrRecipient,
msg,
options = {})
{
  const recipient =
  typeof idOrRecipient === 'string' ?
  {
    id: idOrRecipient } :

  idOrRecipient;
  let messageType = 'UPDATE';
  if (options.messaging_type) {
    messageType = options.messaging_type;
  } else if (options.tag) {
    messageType = 'MESSAGE_TAG';
  }

  return sendRequest(_objectSpread({
    messaging_type: messageType,
    recipient,
    message: _Messenger.default.createMessage(msg, options) },
  omitUndefinedFields(options)));

}

function sendText(
recipient,
text,
options)
{
  return sendMessage(recipient, _Messenger.default.createText(text, options), options);
}

function sendAttachment(
recipient,
attachment,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createAttachment(attachment, options),
  options);

}
function sendAudio(
recipient,
audio,
options)
{
  return sendMessage(recipient, _Messenger.default.createAudio(audio, options), options);
}

function sendImage(
recipient,
image,
options)
{
  return sendMessage(recipient, _Messenger.default.createImage(image, options), options);
}

function sendVideo(
recipient,
video,
options)
{
  return sendMessage(recipient, _Messenger.default.createVideo(video, options), options);
}

function sendFile(
recipient,
file,
options)
{
  return sendMessage(recipient, _Messenger.default.createFile(file, options), options);
}

function sendTemplate(
recipient,
payload,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createTemplate(payload, options),
  options);

}

function sendButtonTemplate(
recipient,
text,
buttons,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createButtonTemplate(text, buttons, options),
  options);

}

function sendGenericTemplate(
recipient,
elements,
_ref =






{})
{let { // $FlowFixMe
    image_aspect_ratio = 'horizontal' } = _ref,options = _objectWithoutProperties(_ref, ["image_aspect_ratio"]);return sendMessage(
  recipient,
  _Messenger.default.createGenericTemplate(elements, _objectSpread({},
  options, {
    image_aspect_ratio })),

  options);

}

function sendListTemplate(
recipient,
elements,
buttons,
_ref2 =






{})
{let { // $FlowFixMe
    top_element_style = 'large' } = _ref2,options = _objectWithoutProperties(_ref2, ["top_element_style"]);return sendMessage(
  recipient,
  _Messenger.default.createListTemplate(elements, buttons, _objectSpread({},
  options, {
    top_element_style })),

  options);

}

function sendOpenGraphTemplate(
recipient,
elements,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createOpenGraphTemplate(elements, options),
  options);

}

function sendReceiptTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createReceiptTemplate(attrs, options),
  options);

}

function sendMediaTemplate(
recipient,
elements,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createMediaTemplate(elements, options),
  options);

}

function sendAirlineBoardingPassTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createAirlineBoardingPassTemplate(attrs, options),
  options);

}

function sendAirlineCheckinTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createAirlineCheckinTemplate(attrs, options),
  options);

}

function sendAirlineItineraryTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createAirlineItineraryTemplate(attrs, options),
  options);

}

function sendAirlineUpdateTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger.default.createAirlineUpdateTemplate(attrs, options),
  options);

}

function getUserProfile(
userId,
options = {})
{
  return {
    method: 'GET',
    relative_url: `${userId}`.concat(
    options.access_token ? `?access_token=${options.access_token}` : '') };


}

function sendSenderAction(
idOrRecipient,
action,
options)
{
  const recipient =
  typeof idOrRecipient === 'string' ?
  {
    id: idOrRecipient } :

  idOrRecipient;

  return sendRequest(_objectSpread({
    recipient,
    sender_action: action },
  omitUndefinedFields(options)));

}

function typingOn(idOrRecipient, options) {
  return sendSenderAction(idOrRecipient, 'typing_on', options);
}

function typingOff(idOrRecipient, options) {
  return sendSenderAction(idOrRecipient, 'typing_off', options);
}

function markSeen(idOrRecipient, options) {
  return sendSenderAction(idOrRecipient, 'mark_seen', options);
}

function passThreadControl(
recipientId,
targetAppId,
metadata,
options)
{
  return {
    method: 'POST',
    relative_url: 'me/pass_thread_control',
    body: _objectSpread({
      recipient: { id: recipientId },
      target_app_id: targetAppId,
      metadata },
    omitUndefinedFields(options)) };


}

function passThreadControlToPageInbox(
recipientId,
metadata,
options)
{
  return passThreadControl(recipientId, 263902037430900, metadata, options);
}

function takeThreadControl(
recipientId,
metadata,
options)
{
  return {
    method: 'POST',
    relative_url: 'me/take_thread_control',
    body: _objectSpread({
      recipient: { id: recipientId },
      metadata },
    omitUndefinedFields(options)) };


}

function requestThreadControl(
recipientId,
metadata,
options)
{
  return {
    method: 'POST',
    relative_url: 'me/request_thread_control',
    body: _objectSpread({
      recipient: { id: recipientId },
      metadata },
    omitUndefinedFields(options)) };


}

function getThreadOwner(
recipientId,
options = {})
{
  return {
    method: 'GET',
    relative_url: `me/thread_owner?recipient=${recipientId}`.concat(
    options.access_token ? `&access_token=${options.access_token}` : ''),

    responseAccessPath: 'data[0].thread_owner' };

}

function associateLabel(
userId,
labelId,
options)
{
  return {
    method: 'POST',
    relative_url: `${labelId}/label`,
    body: _objectSpread({
      user: userId },
    omitUndefinedFields(options)) };


}

function dissociateLabel(
userId,
labelId,
options)
{
  return {
    method: 'DELETE',
    relative_url: `${labelId}/label`,
    body: _objectSpread({
      user: userId },
    omitUndefinedFields(options)) };


}

function getAssociatedLabels(
userId,
options = {})
{
  return {
    method: 'GET',
    relative_url: `${userId}/custom_labels`.concat(
    options.access_token ? `?access_token=${options.access_token}` : '') };


}

function deprecated(name, fn) {
  return (...args) => {
    (0, _warning.default)(
    false,
    `\`MessengerBatch.${name}\` is deprecated. Use \`MessengerBatch.${fn.name}\` instead.`);

    return fn(...args);
  };
}

const MessengerBatch = {
  sendRequest,
  sendMessage,
  sendText,
  sendAttachment,
  sendAudio,
  sendImage,
  sendVideo,
  sendFile,
  sendTemplate,
  sendButtonTemplate,
  sendGenericTemplate,
  sendListTemplate: deprecated('sendListTemplate', sendListTemplate),
  sendOpenGraphTemplate: deprecated(
  'sendOpenGraphTemplate',
  sendOpenGraphTemplate),

  sendReceiptTemplate,
  sendMediaTemplate,
  sendAirlineBoardingPassTemplate,
  sendAirlineCheckinTemplate,
  sendAirlineItineraryTemplate,
  sendAirlineUpdateTemplate,

  getUserProfile,

  sendSenderAction,
  typingOn,
  typingOff,
  markSeen,

  passThreadControl,
  passThreadControlToPageInbox,
  takeThreadControl,
  requestThreadControl,
  getThreadOwner,

  associateLabel,
  dissociateLabel,
  getAssociatedLabels };var _default =


MessengerBatch;exports.default = _default;